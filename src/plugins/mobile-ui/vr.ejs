
	<style>
		      body {
		        margin: 0px;
		        overflow: hidden;
		      }
		      #example {
		        position: absolute;
		        top: 0;
		        left: 0;
		        right: 0;
		        bottom: 0;
		      }
	    </style>

			<div id="example"></div>



			<script>
			var self=this;
			var camera, scene, renderer;
			var effect, controls;
			var element, container;
			var clock;

			$.getScript( "plugin/mobile-ui/js/third-party/threejs/three.js",function(){
				$.when(

				    $.getScript( "plugin/mobile-ui/js/third-party/threejs/StereoEffect.js" ),
				    $.getScript( "plugin/mobile-ui/js/third-party/threejs/DeviceOrientationControls.js" ),
						$.getScript( "plugin/mobile-ui/js/third-party/threejs/OrbitControls.js" ),
				    $.Deferred(function( deferred ){
				        $( deferred.resolve );
				    })
				).done(function(){
					console.log('initing...')
					init();
					animate();
				})
				.fail(function(xhr,settings,err){
					console.log("failed loading scripts");
					console.dir(err);
				})
			})

			function init() {
	 			clock= new THREE.Clock();

			  renderer = new THREE.WebGLRenderer();
			  element = renderer.domElement;
			  container = document.getElementById('example');
			  container.appendChild(element);

			  effect = new THREE.StereoEffect(renderer);

			  scene = new THREE.Scene();

			  camera = new THREE.PerspectiveCamera(90, 1, 0.001, 700);
			  camera.position.set(0, 10, 0);
			  scene.add(camera);

			  controls = new THREE.OrbitControls(camera, element);
			  controls.rotateUp(Math.PI / 4);
			  controls.target.set(
			    camera.position.x + 0.1,
			    camera.position.y,
			    camera.position.z
			  );
			  controls.noZoom = true;
			  controls.noPan = true;

			  function setOrientationControls(e) {
			    if (!e.alpha) {
			      return;
			    }

			    controls = new THREE.DeviceOrientationControls(camera, true);
			    controls.connect();
			    controls.update();

			    element.addEventListener('click', fullscreen, false);

			    window.removeEventListener('deviceorientation', setOrientationControls, true);
			  }
			  window.addEventListener('deviceorientation', setOrientationControls, true);


			  var light = new THREE.HemisphereLight(0x777777, 0x000000, 0.6);
			  scene.add(light);

			  var texture = THREE.ImageUtils.loadTexture(
			    'plugin/mobile-ui/textures/patterns/checker.png'
			  );
			  texture.wrapS = THREE.RepeatWrapping;
			  texture.wrapT = THREE.RepeatWrapping;
			  texture.repeat = new THREE.Vector2(50, 50);
			  texture.anisotropy = renderer.getMaxAnisotropy();

			  var material = new THREE.MeshPhongMaterial({
			    color: 0xffffff,
			    specular: 0xffffff,
			    shininess: 20,
			    shading: THREE.FlatShading,
			    map: texture
			  });

			  var geometry = new THREE.PlaneGeometry(1000, 1000);

			  var mesh = new THREE.Mesh(geometry, material);
			  mesh.rotation.x = -Math.PI / 2;
			  scene.add(mesh);

			  window.addEventListener('resize', resize, false);
			  setTimeout(resize, 1);
			}

			function resize() {
			  var width = container.offsetWidth;
			  var height = container.offsetHeight;

			  camera.aspect = width / height;
			  camera.updateProjectionMatrix();

			  renderer.setSize(width, height);
			  effect.setSize(width, height);
			}

			function update(dt) {
			  resize();

			  camera.updateProjectionMatrix();

			  controls.update(dt);
			}

			function render(dt) {
			  effect.render(scene, camera);
			}

			function animate(t) {
			  requestAnimationFrame(animate);

			  update(clock.getDelta());
			  render(clock.getDelta());
			}

			function fullscreen() {
			  if (container.requestFullscreen) {
			    container.requestFullscreen();
			  } else if (container.msRequestFullscreen) {
			    container.msRequestFullscreen();
			  } else if (container.mozRequestFullScreen) {
			    container.mozRequestFullScreen();
			  } else if (container.webkitRequestFullscreen) {
			    container.webkitRequestFullscreen();
			  }
			}
			</script>
